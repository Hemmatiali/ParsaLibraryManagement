// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParsaLibraryManagement.Infrastructure.Data.Contexts;

#nullable disable

namespace ParsaLibraryManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ParsaLibraryManagementDbContext))]
    [Migration("20240415194513_dbInit")]
    partial class dbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("CategoryId")
                        .HasColumnType("smallint");

                    b.Property<short>("CountInStock")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageAddress")
                        .IsRequired()
                        .HasMaxLength(37)
                        .IsUnicode(false)
                        .HasColumnType("varchar(37)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))")
                        .HasComment("-0 NotAvailable -1 Available");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("PageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.BookCategory", b =>
                {
                    b.Property<short>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("CategoryId"));

                    b.Property<string>("ImageAddress")
                        .IsRequired()
                        .HasMaxLength(37)
                        .IsUnicode(false)
                        .HasColumnType("varchar(37)");

                    b.Property<short?>("RefId")
                        .HasColumnType("smallint")
                        .HasComment("If it is null then it will be a SuperGroup, but if it is not Null then it will be a SubGroup.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.HasIndex("RefId");

                    b.ToTable("BooksCategories");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.BorrowedBook", b =>
                {
                    b.Property<int>("Bid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Bid"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBorrowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Bid");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowedBooks");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.Gender", b =>
                {
                    b.Property<byte>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("GenderId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("GenderId");

                    b.HasIndex(new[] { "Code" }, "IX_Genders_Code")
                        .IsUnique();

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = (byte)1,
                            Code = "M",
                            Title = "Male"
                        },
                        new
                        {
                            GenderId = (byte)2,
                            Code = "F",
                            Title = "Female"
                        },
                        new
                        {
                            GenderId = (byte)3,
                            Code = "RNS",
                            Title = "Rather Not Say"
                        },
                        new
                        {
                            GenderId = (byte)4,
                            Code = "MXD",
                            Title = "Mixed"
                        });
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.Publisher", b =>
                {
                    b.Property<Guid>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("GenderId")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PublisherId");

                    b.HasIndex("GenderId");

                    b.HasIndex(new[] { "Email" }, "IX_Publishers_Email")
                        .IsUnique();

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("GenderId")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasComment("This is only for Iranian phone numbers - This field is null for foreign users.");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("GenderId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.Book", b =>
                {
                    b.HasOne("ParsaLibraryManagement.Domain.Entities.BookCategory", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Books_BooksCategories");

                    b.HasOne("ParsaLibraryManagement.Domain.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .IsRequired()
                        .HasConstraintName("FK_Books_Publishers");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.BookCategory", b =>
                {
                    b.HasOne("ParsaLibraryManagement.Domain.Entities.BookCategory", "Ref")
                        .WithMany("InverseRef")
                        .HasForeignKey("RefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_BooksCategory_RefId");

                    b.Navigation("Ref");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.BorrowedBook", b =>
                {
                    b.HasOne("ParsaLibraryManagement.Domain.Entities.Book", "Book")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_BorrowedBooks_Books");

                    b.HasOne("ParsaLibraryManagement.Domain.Entities.User", "User")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_BorrowedBooks_Users");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.Publisher", b =>
                {
                    b.HasOne("ParsaLibraryManagement.Domain.Entities.Gender", "Gender")
                        .WithMany("Publishers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Publishers_Genders");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.User", b =>
                {
                    b.HasOne("ParsaLibraryManagement.Domain.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Genders");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.Book", b =>
                {
                    b.Navigation("BorrowedBooks");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.BookCategory", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("InverseRef");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Publishers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ParsaLibraryManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("BorrowedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
